{"ast":null,"code":"/**\r\n * Servicio de API para CampusWell\r\n * Este archivo contiene todas las funciones para comunicarse con el backend\r\n */\n\nimport config from '../config.js';\nconst AGG_BASE = config.AGGREGATOR_URL;\nconst PSY_BASE = config.PSYCH_URL;\nconst SPO_BASE = config.SPORTS_URL;\nconst HAB_BASE = config.HABITS_URL;\nconst ANA_BASE = config.ANALYTICS_URL;\nclass ApiService {\n  /**\r\n   * Realiza una petición HTTP\r\n   * @param {string} endpoint - Endpoint de la API\r\n   * @param {Object} options - Opciones de la petición\r\n   * @returns {Promise} - Respuesta de la API\r\n   */\n  async requestAbs(url, options = {}) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API Error ${response.status}:`, errorText);\n        throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);\n      }\n\n      // Verificar si la respuesta tiene contenido\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      } else {\n        return {\n          message: 'Success',\n          status: response.status\n        };\n      }\n    } catch (error) {\n      console.error('API Error:', error);\n      // Si es un error de red, devolver datos mock para desarrollo\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        console.warn('Network error, using mock data for development');\n        return this.getMockData(url, options.method);\n      }\n      throw error;\n    }\n  }\n\n  // Datos mock para desarrollo cuando la API no está disponible\n  getMockData(url, method) {\n    if (url.includes('/wellbeing/') && url.includes('/overview')) {\n      return {\n        student: {\n          id: 1,\n          name: \"Juan Pérez\",\n          email: \"juan@campus.edu\",\n          career: \"Ingeniería\",\n          cohort: \"2025\"\n        },\n        appointments: [{\n          id: 1,\n          psychologist: \"Dr. García\",\n          date: \"2025-01-15T10:00:00Z\",\n          status: \"CONFIRMED\"\n        }],\n        habits: [{\n          id: 1,\n          sleepHours: 8,\n          exerciseMinutes: 30,\n          mood: \"good\",\n          date: \"2025-01-14T00:00:00Z\"\n        }]\n      };\n    }\n    if (url.includes('/wellbeing/recommendation')) {\n      return {\n        avg_mood: 4.2,\n        suggested_event: {\n          id: 1,\n          name: \"Yoga Matutino\",\n          type: \"wellness\",\n          date: \"2025-01-16T08:00:00Z\",\n          location: \"Gimnasio Principal\"\n        }\n      };\n    }\n    if (url.includes('/events')) {\n      return [{\n        id: 1,\n        name: \"Campus Run\",\n        type: \"sport\",\n        date: \"2025-01-20T09:00:00Z\",\n        location: \"Pista de Atletismo\"\n      }, {\n        id: 2,\n        name: \"Meditación Grupal\",\n        type: \"wellness\",\n        date: \"2025-01-18T18:00:00Z\",\n        location: \"Sala de Meditación\"\n      }];\n    }\n    if (url.includes('/habits/')) {\n      return [{\n        id: 1,\n        sleepHours: 8,\n        exerciseMinutes: 30,\n        mood: \"good\",\n        date: \"2025-01-14T00:00:00Z\"\n      }];\n    }\n    if (url.includes('/api/students/') && !url.includes('/history')) {\n      return {\n        id: 1,\n        name: \"Juan Pérez\",\n        email: \"juan@campus.edu\",\n        career: \"Ingeniería\",\n        cohort: \"2025\"\n      };\n    }\n    if (url.includes('/api/students/') && url.includes('/history')) {\n      return [{\n        id: 1,\n        psychologist: \"Dr. García\",\n        date: \"2025-01-15T10:00:00Z\",\n        status: \"CONFIRMED\"\n      }];\n    }\n    return {\n      message: 'Mock data',\n      url,\n      method\n    };\n  }\n\n  // Helper para construir URL\n  buildUrl(base, endpoint) {\n    return `${base}${endpoint}`;\n  }\n\n  /**\r\n   * Obtiene la vista general del bienestar de un estudiante\r\n   * @param {number} studentId - ID del estudiante\r\n   * @returns {Promise<Object>} - Datos del bienestar\r\n   */\n  async getWellbeingOverview(studentId) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/${studentId}/overview`));\n  }\n\n  /**\r\n   * Obtiene recomendaciones para un estudiante\r\n   * @param {number} studentId - ID del estudiante\r\n   * @returns {Promise<Object>} - Recomendaciones\r\n   */\n  async getRecommendations(studentId) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/recommendation`), {\n      method: 'POST',\n      body: JSON.stringify({\n        student_id: parseInt(studentId)\n      })\n    });\n  }\n\n  /**\r\n   * Verifica el estado de salud de la API\r\n   * @returns {Promise<Object>} - Estado de salud\r\n   */\n  async getHealth() {\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/health'));\n  }\n\n  /**\r\n   * Obtiene eventos deportivos\r\n   * @param {string} type - Tipo de evento (opcional)\r\n   * @returns {Promise<Array>} - Lista de eventos\r\n   */\n  async getEvents(type = null) {\n    const params = type ? `?type=${type}` : '';\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/events${params}`));\n  }\n\n  /**\r\n   * Crea un nuevo evento deportivo\r\n   * @param {Object} eventData - Datos del evento\r\n   * @returns {Promise<Object>} - Evento creado\r\n   */\n  async createEvent(eventData) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/events'), {\n      method: 'POST',\n      body: JSON.stringify(eventData)\n    });\n  }\n\n  /**\r\n   * Registra un estudiante en un evento\r\n   * @param {number} studentId - ID del estudiante\r\n   * @param {number} eventId - ID del evento\r\n   * @returns {Promise<Object>} - Resultado del registro\r\n   */\n  async registerForEvent(studentId, eventId) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/registrations`), {\n      method: 'POST',\n      body: JSON.stringify({\n        student_id: parseInt(studentId),\n        event_id: parseInt(eventId)\n      })\n    });\n  }\n\n  /**\r\n   * Crea una nueva cita psicológica\r\n   * @param {Object} appointmentData - Datos de la cita\r\n   * @returns {Promise<Object>} - Cita creada\r\n   */\n  async createAppointment(appointmentData) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/appointments'), {\n      method: 'POST',\n      body: JSON.stringify(appointmentData)\n    });\n  }\n\n  /**\r\n   * Crea un nuevo hábito\r\n   * @param {Object} habitData - Datos del hábito\r\n   * @returns {Promise<Object>} - Hábito creado\r\n   */\n  async createHabit(habitData) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/habits'), {\n      method: 'POST',\n      body: JSON.stringify(habitData)\n    });\n  }\n\n  // ==== Llamadas directas por microservicio (para cumplir rúbrica) ====\n  // psych-svc (PostgreSQL) - CORREGIDO según Postman\n  async getStudent(id) {\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students/${id}`));\n  }\n  async createStudent(student) {\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students`), {\n      method: 'POST',\n      body: JSON.stringify(student)\n    });\n  }\n  async getAppointmentsByStudent(id) {\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students/${id}/history`));\n  }\n  async createAppointmentDirect(appointmentData) {\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/appointments`), {\n      method: 'POST',\n      body: JSON.stringify(appointmentData)\n    });\n  }\n  async psychHealth() {\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/health`));\n  }\n\n  // sports-svc (MySQL) - CORREGIDO según Postman\n  async sportsListEvents(type = null) {\n    const params = type ? `?type=${type}` : '';\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/events${params}`));\n  }\n  async sportsCreateEvent(eventData) {\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/events`), {\n      method: 'POST',\n      body: JSON.stringify(eventData)\n    });\n  }\n  async sportsRegisterForEvent(studentId, eventId) {\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/registrations?student_id=${studentId}&event_id=${eventId}`), {\n      method: 'POST'\n    });\n  }\n  async sportsHealth() {\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/health`));\n  }\n\n  // habits-svc (MongoDB) - CORREGIDO según Postman\n  async habitsList(studentId) {\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits/${studentId}`));\n  }\n  async habitsCreate(habit) {\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits`), {\n      method: 'POST',\n      body: JSON.stringify(habit)\n    });\n  }\n  async habitsHealth() {\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/health`));\n  }\n\n  // Métodos alternativos para cuando el aggregator no esté disponible\n  async getHabitsDirect(studentId) {\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits/${studentId}`));\n  }\n  async createHabitDirect(habitData) {\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits`), {\n      method: 'POST',\n      body: JSON.stringify(habitData)\n    });\n  }\n\n  // aggregator-svc (sin BD)\n  async aggregatorHealth() {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/health`));\n  }\n  async aggregatorOverview(id) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/${id}/overview`));\n  }\n\n  // analytics-svc (Athena)\n  async analyticsStressTrends() {\n    return this.requestAbs(this.buildUrl(ANA_BASE, `/analytics/stress-trends`));\n  }\n  async analyticsHealth() {\n    return this.requestAbs(this.buildUrl(ANA_BASE, `/health`));\n  }\n}\n\n// Instancia singleton del servicio\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["config","AGG_BASE","AGGREGATOR_URL","PSY_BASE","PSYCH_URL","SPO_BASE","SPORTS_URL","HAB_BASE","HABITS_URL","ANA_BASE","ANALYTICS_URL","ApiService","requestAbs","url","options","headers","response","fetch","ok","errorText","text","console","error","status","Error","contentType","get","includes","json","message","name","warn","getMockData","method","student","id","email","career","cohort","appointments","psychologist","date","habits","sleepHours","exerciseMinutes","mood","avg_mood","suggested_event","type","location","buildUrl","base","endpoint","getWellbeingOverview","studentId","getRecommendations","body","JSON","stringify","student_id","parseInt","getHealth","getEvents","params","createEvent","eventData","registerForEvent","eventId","event_id","createAppointment","appointmentData","createHabit","habitData","getStudent","createStudent","getAppointmentsByStudent","createAppointmentDirect","psychHealth","sportsListEvents","sportsCreateEvent","sportsRegisterForEvent","sportsHealth","habitsList","habitsCreate","habit","habitsHealth","getHabitsDirect","createHabitDirect","aggregatorHealth","aggregatorOverview","analyticsStressTrends","analyticsHealth","apiService"],"sources":["C:/Users/annes/campus-well/frontend/src/services/api.js"],"sourcesContent":["/**\r\n * Servicio de API para CampusWell\r\n * Este archivo contiene todas las funciones para comunicarse con el backend\r\n */\r\n\r\nimport config from '../config.js';\r\n\r\nconst AGG_BASE = config.AGGREGATOR_URL;\r\nconst PSY_BASE = config.PSYCH_URL;\r\nconst SPO_BASE = config.SPORTS_URL;\r\nconst HAB_BASE = config.HABITS_URL;\r\nconst ANA_BASE = config.ANALYTICS_URL;\r\n\r\nclass ApiService {\r\n\r\n  /**\r\n   * Realiza una petición HTTP\r\n   * @param {string} endpoint - Endpoint de la API\r\n   * @param {Object} options - Opciones de la petición\r\n   * @returns {Promise} - Respuesta de la API\r\n   */\r\n  async requestAbs(url, options = {}) {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(`API Error ${response.status}:`, errorText);\r\n        throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);\r\n      }\r\n      \r\n      // Verificar si la respuesta tiene contenido\r\n      const contentType = response.headers.get('content-type');\r\n      if (contentType && contentType.includes('application/json')) {\r\n        return await response.json();\r\n      } else {\r\n        return { message: 'Success', status: response.status };\r\n      }\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      // Si es un error de red, devolver datos mock para desarrollo\r\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n        console.warn('Network error, using mock data for development');\r\n        return this.getMockData(url, options.method);\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Datos mock para desarrollo cuando la API no está disponible\r\n  getMockData(url, method) {\r\n    if (url.includes('/wellbeing/') && url.includes('/overview')) {\r\n      return {\r\n        student: {\r\n          id: 1,\r\n          name: \"Juan Pérez\",\r\n          email: \"juan@campus.edu\",\r\n          career: \"Ingeniería\",\r\n          cohort: \"2025\"\r\n        },\r\n        appointments: [\r\n          {\r\n            id: 1,\r\n            psychologist: \"Dr. García\",\r\n            date: \"2025-01-15T10:00:00Z\",\r\n            status: \"CONFIRMED\"\r\n          }\r\n        ],\r\n        habits: [\r\n          {\r\n            id: 1,\r\n            sleepHours: 8,\r\n            exerciseMinutes: 30,\r\n            mood: \"good\",\r\n            date: \"2025-01-14T00:00:00Z\"\r\n          }\r\n        ]\r\n      };\r\n    }\r\n    \r\n    if (url.includes('/wellbeing/recommendation')) {\r\n      return {\r\n        avg_mood: 4.2,\r\n        suggested_event: {\r\n          id: 1,\r\n          name: \"Yoga Matutino\",\r\n          type: \"wellness\",\r\n          date: \"2025-01-16T08:00:00Z\",\r\n          location: \"Gimnasio Principal\"\r\n        }\r\n      };\r\n    }\r\n    \r\n    if (url.includes('/events')) {\r\n      return [\r\n        {\r\n          id: 1,\r\n          name: \"Campus Run\",\r\n          type: \"sport\",\r\n          date: \"2025-01-20T09:00:00Z\",\r\n          location: \"Pista de Atletismo\"\r\n        },\r\n        {\r\n          id: 2,\r\n          name: \"Meditación Grupal\",\r\n          type: \"wellness\",\r\n          date: \"2025-01-18T18:00:00Z\",\r\n          location: \"Sala de Meditación\"\r\n        }\r\n      ];\r\n    }\r\n    \r\n    if (url.includes('/habits/')) {\r\n      return [\r\n        {\r\n          id: 1,\r\n          sleepHours: 8,\r\n          exerciseMinutes: 30,\r\n          mood: \"good\",\r\n          date: \"2025-01-14T00:00:00Z\"\r\n        }\r\n      ];\r\n    }\r\n    \r\n    if (url.includes('/api/students/') && !url.includes('/history')) {\r\n      return {\r\n        id: 1,\r\n        name: \"Juan Pérez\",\r\n        email: \"juan@campus.edu\",\r\n        career: \"Ingeniería\",\r\n        cohort: \"2025\"\r\n      };\r\n    }\r\n    \r\n    if (url.includes('/api/students/') && url.includes('/history')) {\r\n      return [\r\n        {\r\n          id: 1,\r\n          psychologist: \"Dr. García\",\r\n          date: \"2025-01-15T10:00:00Z\",\r\n          status: \"CONFIRMED\"\r\n        }\r\n      ];\r\n    }\r\n    \r\n    return { message: 'Mock data', url, method };\r\n  }\r\n\r\n  // Helper para construir URL\r\n  buildUrl(base, endpoint) {\r\n    return `${base}${endpoint}`;\r\n  }\r\n\r\n  /**\r\n   * Obtiene la vista general del bienestar de un estudiante\r\n   * @param {number} studentId - ID del estudiante\r\n   * @returns {Promise<Object>} - Datos del bienestar\r\n   */\r\n  async getWellbeingOverview(studentId) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/${studentId}/overview`));\r\n  }\r\n\r\n  /**\r\n   * Obtiene recomendaciones para un estudiante\r\n   * @param {number} studentId - ID del estudiante\r\n   * @returns {Promise<Object>} - Recomendaciones\r\n   */\r\n  async getRecommendations(studentId) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/recommendation`), {\r\n      method: 'POST',\r\n      body: JSON.stringify({ student_id: parseInt(studentId) }),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Verifica el estado de salud de la API\r\n   * @returns {Promise<Object>} - Estado de salud\r\n   */\r\n  async getHealth() {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/health'));\r\n  }\r\n\r\n  /**\r\n   * Obtiene eventos deportivos\r\n   * @param {string} type - Tipo de evento (opcional)\r\n   * @returns {Promise<Array>} - Lista de eventos\r\n   */\r\n  async getEvents(type = null) {\r\n    const params = type ? `?type=${type}` : '';\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/events${params}`));\r\n  }\r\n\r\n  /**\r\n   * Crea un nuevo evento deportivo\r\n   * @param {Object} eventData - Datos del evento\r\n   * @returns {Promise<Object>} - Evento creado\r\n   */\r\n  async createEvent(eventData) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/events'), {\r\n      method: 'POST',\r\n      body: JSON.stringify(eventData),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registra un estudiante en un evento\r\n   * @param {number} studentId - ID del estudiante\r\n   * @param {number} eventId - ID del evento\r\n   * @returns {Promise<Object>} - Resultado del registro\r\n   */\r\n  async registerForEvent(studentId, eventId) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/registrations`), {\r\n      method: 'POST',\r\n      body: JSON.stringify({ \r\n        student_id: parseInt(studentId), \r\n        event_id: parseInt(eventId) \r\n      }),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Crea una nueva cita psicológica\r\n   * @param {Object} appointmentData - Datos de la cita\r\n   * @returns {Promise<Object>} - Cita creada\r\n   */\r\n  async createAppointment(appointmentData) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/appointments'), {\r\n      method: 'POST',\r\n      body: JSON.stringify(appointmentData),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Crea un nuevo hábito\r\n   * @param {Object} habitData - Datos del hábito\r\n   * @returns {Promise<Object>} - Hábito creado\r\n   */\r\n  async createHabit(habitData) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/habits'), {\r\n      method: 'POST',\r\n      body: JSON.stringify(habitData),\r\n    });\r\n  }\r\n\r\n  // ==== Llamadas directas por microservicio (para cumplir rúbrica) ====\r\n  // psych-svc (PostgreSQL) - CORREGIDO según Postman\r\n  async getStudent(id) {\r\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students/${id}`));\r\n  }\r\n  async createStudent(student) {\r\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students`), {\r\n      method: 'POST',\r\n      body: JSON.stringify(student),\r\n    });\r\n  }\r\n  async getAppointmentsByStudent(id) {\r\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students/${id}/history`));\r\n  }\r\n  async createAppointmentDirect(appointmentData) {\r\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/appointments`), {\r\n      method: 'POST',\r\n      body: JSON.stringify(appointmentData),\r\n    });\r\n  }\r\n  async psychHealth() {\r\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/health`));\r\n  }\r\n\r\n  // sports-svc (MySQL) - CORREGIDO según Postman\r\n  async sportsListEvents(type = null) {\r\n    const params = type ? `?type=${type}` : '';\r\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/events${params}`));\r\n  }\r\n  async sportsCreateEvent(eventData) {\r\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/events`), {\r\n      method: 'POST',\r\n      body: JSON.stringify(eventData),\r\n    });\r\n  }\r\n  async sportsRegisterForEvent(studentId, eventId) {\r\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/registrations?student_id=${studentId}&event_id=${eventId}`), {\r\n      method: 'POST',\r\n    });\r\n  }\r\n  async sportsHealth() {\r\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/health`));\r\n  }\r\n\r\n  // habits-svc (MongoDB) - CORREGIDO según Postman\r\n  async habitsList(studentId) {\r\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits/${studentId}`));\r\n  }\r\n  async habitsCreate(habit) {\r\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits`), {\r\n      method: 'POST',\r\n      body: JSON.stringify(habit),\r\n    });\r\n  }\r\n  async habitsHealth() {\r\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/health`));\r\n  }\r\n\r\n  // Métodos alternativos para cuando el aggregator no esté disponible\r\n  async getHabitsDirect(studentId) {\r\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits/${studentId}`));\r\n  }\r\n  async createHabitDirect(habitData) {\r\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits`), {\r\n      method: 'POST',\r\n      body: JSON.stringify(habitData),\r\n    });\r\n  }\r\n\r\n  // aggregator-svc (sin BD)\r\n  async aggregatorHealth() {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/health`));\r\n  }\r\n  async aggregatorOverview(id) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/${id}/overview`));\r\n  }\r\n\r\n  // analytics-svc (Athena)\r\n  async analyticsStressTrends() {\r\n    return this.requestAbs(this.buildUrl(ANA_BASE, `/analytics/stress-trends`));\r\n  }\r\n  async analyticsHealth() {\r\n    return this.requestAbs(this.buildUrl(ANA_BASE, `/health`));\r\n  }\r\n}\r\n\r\n// Instancia singleton del servicio\r\nconst apiService = new ApiService();\r\n\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}