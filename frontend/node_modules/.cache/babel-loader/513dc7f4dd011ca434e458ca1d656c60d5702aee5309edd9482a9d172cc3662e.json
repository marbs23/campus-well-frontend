{"ast":null,"code":"/**\n * Servicio de API para CampusWell\n * Este archivo contiene todas las funciones para comunicarse con el backend\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  /**\n   * Realiza una petici贸n HTTP\n   * @param {string} endpoint - Endpoint de la API\n   * @param {Object} options - Opciones de la petici贸n\n   * @returns {Promise} - Respuesta de la API\n   */\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obtiene la vista general del bienestar de un estudiante\n   * @param {number} studentId - ID del estudiante\n   * @returns {Promise<Object>} - Datos del bienestar\n   */\n  async getWellbeingOverview(studentId) {\n    return this.request(`/wellbeing/${studentId}/overview`);\n  }\n\n  /**\n   * Obtiene recomendaciones para un estudiante\n   * @param {number} studentId - ID del estudiante\n   * @returns {Promise<Object>} - Recomendaciones\n   */\n  async getRecommendations(studentId) {\n    return this.request(`/wellbeing/recommendation?student_id=${studentId}`, {\n      method: 'POST'\n    });\n  }\n\n  /**\n   * Verifica el estado de salud de la API\n   * @returns {Promise<Object>} - Estado de salud\n   */\n  async getHealth() {\n    return this.request('/health');\n  }\n}\n\n// Instancia singleton del servicio\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","request","endpoint","options","url","config","headers","response","fetch","ok","Error","status","json","error","console","getWellbeingOverview","studentId","getRecommendations","method","getHealth","apiService"],"sources":["/Users/maferlazon/Desktop/cloud/campuswell/frontend/src/services/api.js"],"sourcesContent":["/**\n * Servicio de API para CampusWell\n * Este archivo contiene todas las funciones para comunicarse con el backend\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  /**\n   * Realiza una petici贸n HTTP\n   * @param {string} endpoint - Endpoint de la API\n   * @param {Object} options - Opciones de la petici贸n\n   * @returns {Promise} - Respuesta de la API\n   */\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obtiene la vista general del bienestar de un estudiante\n   * @param {number} studentId - ID del estudiante\n   * @returns {Promise<Object>} - Datos del bienestar\n   */\n  async getWellbeingOverview(studentId) {\n    return this.request(`/wellbeing/${studentId}/overview`);\n  }\n\n  /**\n   * Obtiene recomendaciones para un estudiante\n   * @param {number} studentId - ID del estudiante\n   * @returns {Promise<Object>} - Recomendaciones\n   */\n  async getRecommendations(studentId) {\n    return this.request(`/wellbeing/recommendation?student_id=${studentId}`, {\n      method: 'POST',\n    });\n  }\n\n  /**\n   * Verifica el estado de salud de la API\n   * @returns {Promise<Object>} - Estado de salud\n   */\n  async getHealth() {\n    return this.request('/health');\n  }\n}\n\n// Instancia singleton del servicio\nconst apiService = new ApiService();\n\nexport default apiService;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,EAAE;AAExD,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAGN,YAAY;EAC7B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMO,OAAOA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,OAAO,GAAGE,QAAQ,EAAE;IACxC,MAAMG,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC;IAED,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,MAAM,CAAC;MAEzC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClC,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAME,oBAAoBA,CAACC,SAAS,EAAE;IACpC,OAAO,IAAI,CAACf,OAAO,CAAC,cAAce,SAAS,WAAW,CAAC;EACzD;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMC,kBAAkBA,CAACD,SAAS,EAAE;IAClC,OAAO,IAAI,CAACf,OAAO,CAAC,wCAAwCe,SAAS,EAAE,EAAE;MACvEE,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,MAAMC,SAASA,CAAA,EAAG;IAChB,OAAO,IAAI,CAAClB,OAAO,CAAC,SAAS,CAAC;EAChC;AACF;;AAEA;AACA,MAAMmB,UAAU,GAAG,IAAItB,UAAU,CAAC,CAAC;AAEnC,eAAesB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}