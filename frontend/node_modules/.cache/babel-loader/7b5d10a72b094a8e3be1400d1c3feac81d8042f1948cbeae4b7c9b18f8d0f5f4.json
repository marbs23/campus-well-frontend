{"ast":null,"code":"/**\r\n * Servicio de API para CampusWell\r\n * Este archivo contiene todas las funciones para comunicarse con el backend\r\n */\n\nimport config from '../config.js';\nconst AGG_BASE = config.AGGREGATOR_URL;\nconst PSY_BASE = config.PSYCH_URL;\nconst SPO_BASE = config.SPORTS_URL;\nconst HAB_BASE = config.HABITS_URL;\nconst ANA_BASE = config.ANALYTICS_URL;\nclass ApiService {\n  /**\r\n   * Realiza una petición HTTP\r\n   * @param {string} endpoint - Endpoint de la API\r\n   * @param {Object} options - Opciones de la petición\r\n   * @returns {Promise} - Respuesta de la API\r\n   */\n  async requestAbs(url, options = {}) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`API Error ${response.status}:`, errorText);\n        throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);\n      }\n\n      // Verificar si la respuesta tiene contenido\n      const contentType = response.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return await response.json();\n      } else {\n        return {\n          message: 'Success',\n          status: response.status\n        };\n      }\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // Helper para construir URL\n  buildUrl(base, endpoint) {\n    return `${base}${endpoint}`;\n  }\n\n  /**\r\n   * Obtiene la vista general del bienestar de un estudiante\r\n   * @param {number} studentId - ID del estudiante\r\n   * @returns {Promise<Object>} - Datos del bienestar\r\n   */\n  async getWellbeingOverview(studentId) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/${studentId}/overview`));\n  }\n\n  /**\r\n   * Obtiene recomendaciones para un estudiante\r\n   * @param {number} studentId - ID del estudiante\r\n   * @returns {Promise<Object>} - Recomendaciones\r\n   */\n  async getRecommendations(studentId) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/recommendation`), {\n      method: 'POST',\n      body: JSON.stringify({\n        student_id: parseInt(studentId)\n      })\n    });\n  }\n\n  /**\r\n   * Verifica el estado de salud de la API\r\n   * @returns {Promise<Object>} - Estado de salud\r\n   */\n  async getHealth() {\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/health'));\n  }\n\n  /**\r\n   * Obtiene eventos deportivos\r\n   * @param {string} type - Tipo de evento (opcional)\r\n   * @returns {Promise<Array>} - Lista de eventos\r\n   */\n  async getEvents(type = null) {\n    const params = type ? `?type=${type}` : '';\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/events${params}`));\n  }\n\n  /**\r\n   * Crea un nuevo evento deportivo\r\n   * @param {Object} eventData - Datos del evento\r\n   * @returns {Promise<Object>} - Evento creado\r\n   */\n  async createEvent(eventData) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/events'), {\n      method: 'POST',\n      body: JSON.stringify(eventData)\n    });\n  }\n\n  /**\r\n   * Registra un estudiante en un evento\r\n   * @param {number} studentId - ID del estudiante\r\n   * @param {number} eventId - ID del evento\r\n   * @returns {Promise<Object>} - Resultado del registro\r\n   */\n  async registerForEvent(studentId, eventId) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/registrations`), {\n      method: 'POST',\n      body: JSON.stringify({\n        student_id: parseInt(studentId),\n        event_id: parseInt(eventId)\n      })\n    });\n  }\n\n  /**\r\n   * Crea una nueva cita psicológica\r\n   * @param {Object} appointmentData - Datos de la cita\r\n   * @returns {Promise<Object>} - Cita creada\r\n   */\n  async createAppointment(appointmentData) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/appointments'), {\n      method: 'POST',\n      body: JSON.stringify(appointmentData)\n    });\n  }\n\n  /**\r\n   * Crea un nuevo hábito\r\n   * @param {Object} habitData - Datos del hábito\r\n   * @returns {Promise<Object>} - Hábito creado\r\n   */\n  async createHabit(habitData) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/habits'), {\n      method: 'POST',\n      body: JSON.stringify(habitData)\n    });\n  }\n\n  // ==== Llamadas directas por microservicio (para cumplir rúbrica) ====\n  // psych-svc (PostgreSQL) - CORREGIDO según Postman\n  async getStudent(id) {\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students/${id}`));\n  }\n  async createStudent(student) {\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students`), {\n      method: 'POST',\n      body: JSON.stringify(student)\n    });\n  }\n  async getAppointmentsByStudent(id) {\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students/${id}/history`));\n  }\n  async createAppointmentDirect(appointmentData) {\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/appointments`), {\n      method: 'POST',\n      body: JSON.stringify(appointmentData)\n    });\n  }\n  async psychHealth() {\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/health`));\n  }\n\n  // sports-svc (MySQL) - CORREGIDO según Postman\n  async sportsListEvents(type = null) {\n    const params = type ? `?type=${type}` : '';\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/events${params}`));\n  }\n  async sportsCreateEvent(eventData) {\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/events`), {\n      method: 'POST',\n      body: JSON.stringify(eventData)\n    });\n  }\n  async sportsRegisterForEvent(studentId, eventId) {\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/registrations?student_id=${studentId}&event_id=${eventId}`), {\n      method: 'POST'\n    });\n  }\n  async sportsHealth() {\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/health`));\n  }\n\n  // habits-svc (MongoDB) - CORREGIDO según Postman\n  async habitsList(studentId) {\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits/${studentId}`));\n  }\n  async habitsCreate(habit) {\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits`), {\n      method: 'POST',\n      body: JSON.stringify(habit)\n    });\n  }\n  async habitsHealth() {\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/health`));\n  }\n\n  // Métodos alternativos para cuando el aggregator no esté disponible\n  async getHabitsDirect(studentId) {\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits/${studentId}`));\n  }\n  async createHabitDirect(habitData) {\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits`), {\n      method: 'POST',\n      body: JSON.stringify(habitData)\n    });\n  }\n\n  // aggregator-svc (sin BD)\n  async aggregatorHealth() {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/health`));\n  }\n  async aggregatorOverview(id) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/${id}/overview`));\n  }\n\n  // analytics-svc (Athena)\n  async analyticsStressTrends() {\n    return this.requestAbs(this.buildUrl(ANA_BASE, `/analytics/stress-trends`));\n  }\n  async analyticsHealth() {\n    return this.requestAbs(this.buildUrl(ANA_BASE, `/health`));\n  }\n}\n\n// Instancia singleton del servicio\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["config","AGG_BASE","AGGREGATOR_URL","PSY_BASE","PSYCH_URL","SPO_BASE","SPORTS_URL","HAB_BASE","HABITS_URL","ANA_BASE","ANALYTICS_URL","ApiService","requestAbs","url","options","headers","response","fetch","ok","errorText","text","console","error","status","Error","contentType","get","includes","json","message","buildUrl","base","endpoint","getWellbeingOverview","studentId","getRecommendations","method","body","JSON","stringify","student_id","parseInt","getHealth","getEvents","type","params","createEvent","eventData","registerForEvent","eventId","event_id","createAppointment","appointmentData","createHabit","habitData","getStudent","id","createStudent","student","getAppointmentsByStudent","createAppointmentDirect","psychHealth","sportsListEvents","sportsCreateEvent","sportsRegisterForEvent","sportsHealth","habitsList","habitsCreate","habit","habitsHealth","getHabitsDirect","createHabitDirect","aggregatorHealth","aggregatorOverview","analyticsStressTrends","analyticsHealth","apiService"],"sources":["C:/Users/annes/campus-well/frontend/src/services/api.js"],"sourcesContent":["/**\r\n * Servicio de API para CampusWell\r\n * Este archivo contiene todas las funciones para comunicarse con el backend\r\n */\r\n\r\nimport config from '../config.js';\r\n\r\nconst AGG_BASE = config.AGGREGATOR_URL;\r\nconst PSY_BASE = config.PSYCH_URL;\r\nconst SPO_BASE = config.SPORTS_URL;\r\nconst HAB_BASE = config.HABITS_URL;\r\nconst ANA_BASE = config.ANALYTICS_URL;\r\n\r\nclass ApiService {\r\n\r\n  /**\r\n   * Realiza una petición HTTP\r\n   * @param {string} endpoint - Endpoint de la API\r\n   * @param {Object} options - Opciones de la petición\r\n   * @returns {Promise} - Respuesta de la API\r\n   */\r\n  async requestAbs(url, options = {}) {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(`API Error ${response.status}:`, errorText);\r\n        throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);\r\n      }\r\n      \r\n      // Verificar si la respuesta tiene contenido\r\n      const contentType = response.headers.get('content-type');\r\n      if (contentType && contentType.includes('application/json')) {\r\n        return await response.json();\r\n      } else {\r\n        return { message: 'Success', status: response.status };\r\n      }\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n\r\n  // Helper para construir URL\r\n  buildUrl(base, endpoint) {\r\n    return `${base}${endpoint}`;\r\n  }\r\n\r\n  /**\r\n   * Obtiene la vista general del bienestar de un estudiante\r\n   * @param {number} studentId - ID del estudiante\r\n   * @returns {Promise<Object>} - Datos del bienestar\r\n   */\r\n  async getWellbeingOverview(studentId) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/${studentId}/overview`));\r\n  }\r\n\r\n  /**\r\n   * Obtiene recomendaciones para un estudiante\r\n   * @param {number} studentId - ID del estudiante\r\n   * @returns {Promise<Object>} - Recomendaciones\r\n   */\r\n  async getRecommendations(studentId) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/recommendation`), {\r\n      method: 'POST',\r\n      body: JSON.stringify({ student_id: parseInt(studentId) }),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Verifica el estado de salud de la API\r\n   * @returns {Promise<Object>} - Estado de salud\r\n   */\r\n  async getHealth() {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/health'));\r\n  }\r\n\r\n  /**\r\n   * Obtiene eventos deportivos\r\n   * @param {string} type - Tipo de evento (opcional)\r\n   * @returns {Promise<Array>} - Lista de eventos\r\n   */\r\n  async getEvents(type = null) {\r\n    const params = type ? `?type=${type}` : '';\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/events${params}`));\r\n  }\r\n\r\n  /**\r\n   * Crea un nuevo evento deportivo\r\n   * @param {Object} eventData - Datos del evento\r\n   * @returns {Promise<Object>} - Evento creado\r\n   */\r\n  async createEvent(eventData) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/events'), {\r\n      method: 'POST',\r\n      body: JSON.stringify(eventData),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registra un estudiante en un evento\r\n   * @param {number} studentId - ID del estudiante\r\n   * @param {number} eventId - ID del evento\r\n   * @returns {Promise<Object>} - Resultado del registro\r\n   */\r\n  async registerForEvent(studentId, eventId) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/registrations`), {\r\n      method: 'POST',\r\n      body: JSON.stringify({ \r\n        student_id: parseInt(studentId), \r\n        event_id: parseInt(eventId) \r\n      }),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Crea una nueva cita psicológica\r\n   * @param {Object} appointmentData - Datos de la cita\r\n   * @returns {Promise<Object>} - Cita creada\r\n   */\r\n  async createAppointment(appointmentData) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/appointments'), {\r\n      method: 'POST',\r\n      body: JSON.stringify(appointmentData),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Crea un nuevo hábito\r\n   * @param {Object} habitData - Datos del hábito\r\n   * @returns {Promise<Object>} - Hábito creado\r\n   */\r\n  async createHabit(habitData) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/habits'), {\r\n      method: 'POST',\r\n      body: JSON.stringify(habitData),\r\n    });\r\n  }\r\n\r\n  // ==== Llamadas directas por microservicio (para cumplir rúbrica) ====\r\n  // psych-svc (PostgreSQL) - CORREGIDO según Postman\r\n  async getStudent(id) {\r\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students/${id}`));\r\n  }\r\n  async createStudent(student) {\r\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students`), {\r\n      method: 'POST',\r\n      body: JSON.stringify(student),\r\n    });\r\n  }\r\n  async getAppointmentsByStudent(id) {\r\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students/${id}/history`));\r\n  }\r\n  async createAppointmentDirect(appointmentData) {\r\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/appointments`), {\r\n      method: 'POST',\r\n      body: JSON.stringify(appointmentData),\r\n    });\r\n  }\r\n  async psychHealth() {\r\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/health`));\r\n  }\r\n\r\n  // sports-svc (MySQL) - CORREGIDO según Postman\r\n  async sportsListEvents(type = null) {\r\n    const params = type ? `?type=${type}` : '';\r\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/events${params}`));\r\n  }\r\n  async sportsCreateEvent(eventData) {\r\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/events`), {\r\n      method: 'POST',\r\n      body: JSON.stringify(eventData),\r\n    });\r\n  }\r\n  async sportsRegisterForEvent(studentId, eventId) {\r\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/registrations?student_id=${studentId}&event_id=${eventId}`), {\r\n      method: 'POST',\r\n    });\r\n  }\r\n  async sportsHealth() {\r\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/health`));\r\n  }\r\n\r\n  // habits-svc (MongoDB) - CORREGIDO según Postman\r\n  async habitsList(studentId) {\r\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits/${studentId}`));\r\n  }\r\n  async habitsCreate(habit) {\r\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits`), {\r\n      method: 'POST',\r\n      body: JSON.stringify(habit),\r\n    });\r\n  }\r\n  async habitsHealth() {\r\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/health`));\r\n  }\r\n\r\n  // Métodos alternativos para cuando el aggregator no esté disponible\r\n  async getHabitsDirect(studentId) {\r\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits/${studentId}`));\r\n  }\r\n  async createHabitDirect(habitData) {\r\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits`), {\r\n      method: 'POST',\r\n      body: JSON.stringify(habitData),\r\n    });\r\n  }\r\n\r\n  // aggregator-svc (sin BD)\r\n  async aggregatorHealth() {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/health`));\r\n  }\r\n  async aggregatorOverview(id) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/${id}/overview`));\r\n  }\r\n\r\n  // analytics-svc (Athena)\r\n  async analyticsStressTrends() {\r\n    return this.requestAbs(this.buildUrl(ANA_BASE, `/analytics/stress-trends`));\r\n  }\r\n  async analyticsHealth() {\r\n    return this.requestAbs(this.buildUrl(ANA_BASE, `/health`));\r\n  }\r\n}\r\n\r\n// Instancia singleton del servicio\r\nconst apiService = new ApiService();\r\n\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}