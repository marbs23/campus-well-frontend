{"ast":null,"code":"/**\r\n * Servicio de API para CampusWell\r\n * Este archivo contiene todas las funciones para comunicarse con el backend\r\n */\n\nconst AGG_BASE = process.env.REACT_APP_AGGREGATOR_URL || '';\nconst PSY_BASE = process.env.REACT_APP_PSYCH_URL || '';\nconst SPO_BASE = process.env.REACT_APP_SPORTS_URL || '';\nconst HAB_BASE = process.env.REACT_APP_HABITS_URL || '';\nconst ANA_BASE = process.env.REACT_APP_ANALYTICS_URL || '';\nclass ApiService {\n  constructor() {}\n\n  /**\r\n   * Realiza una petición HTTP\r\n   * @param {string} endpoint - Endpoint de la API\r\n   * @param {Object} options - Opciones de la petición\r\n   * @returns {Promise} - Respuesta de la API\r\n   */\n  async requestAbs(url, options = {}) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // Helper para construir URL\n  buildUrl(base, endpoint) {\n    return `${base}${endpoint}`;\n  }\n\n  /**\r\n   * Obtiene la vista general del bienestar de un estudiante\r\n   * @param {number} studentId - ID del estudiante\r\n   * @returns {Promise<Object>} - Datos del bienestar\r\n   */\n  async getWellbeingOverview(studentId) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/${studentId}/overview`));\n  }\n\n  /**\r\n   * Obtiene recomendaciones para un estudiante\r\n   * @param {number} studentId - ID del estudiante\r\n   * @returns {Promise<Object>} - Recomendaciones\r\n   */\n  async getRecommendations(studentId) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/recommendation?student_id=${studentId}`), {\n      method: 'POST'\n    });\n  }\n\n  /**\r\n   * Verifica el estado de salud de la API\r\n   * @returns {Promise<Object>} - Estado de salud\r\n   */\n  async getHealth() {\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/health'));\n  }\n\n  /**\r\n   * Obtiene eventos deportivos\r\n   * @param {string} type - Tipo de evento (opcional)\r\n   * @returns {Promise<Array>} - Lista de eventos\r\n   */\n  async getEvents(type = null) {\n    const params = type ? `?type=${type}` : '';\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/events${params}`));\n  }\n\n  /**\r\n   * Crea un nuevo evento deportivo\r\n   * @param {Object} eventData - Datos del evento\r\n   * @returns {Promise<Object>} - Evento creado\r\n   */\n  async createEvent(eventData) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/events'), {\n      method: 'POST',\n      body: JSON.stringify(eventData)\n    });\n  }\n\n  /**\r\n   * Registra un estudiante en un evento\r\n   * @param {number} studentId - ID del estudiante\r\n   * @param {number} eventId - ID del evento\r\n   * @returns {Promise<Object>} - Resultado del registro\r\n   */\n  async registerForEvent(studentId, eventId) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/registrations?student_id=${studentId}&event_id=${eventId}`), {\n      method: 'POST'\n    });\n  }\n\n  /**\r\n   * Crea una nueva cita psicológica\r\n   * @param {Object} appointmentData - Datos de la cita\r\n   * @returns {Promise<Object>} - Cita creada\r\n   */\n  async createAppointment(appointmentData) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/appointments'), {\n      method: 'POST',\n      body: JSON.stringify(appointmentData)\n    });\n  }\n\n  /**\r\n   * Crea un nuevo hábito\r\n   * @param {Object} habitData - Datos del hábito\r\n   * @returns {Promise<Object>} - Hábito creado\r\n   */\n  async createHabit(habitData) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/habits'), {\n      method: 'POST',\n      body: JSON.stringify(habitData)\n    });\n  }\n\n  // ==== Llamadas directas por microservicio (para cumplir rúbrica) ====\n  // psych-svc (PostgreSQL)\n  async getStudent(id) {\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students/${id}`));\n  }\n  async createStudent(student) {\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students`), {\n      method: 'POST',\n      body: JSON.stringify(student)\n    });\n  }\n  async getAppointmentsByStudent(id) {\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students/${id}/history`));\n  }\n\n  // sports-svc (MySQL)\n  async sportsListEvents(type = null) {\n    const params = type ? `?type=${type}` : '';\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/events${params}`));\n  }\n  async sportsCreateEvent(eventData) {\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/events`), {\n      method: 'POST',\n      body: JSON.stringify(eventData)\n    });\n  }\n\n  // habits-svc (MongoDB)\n  async habitsList(studentId) {\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits/${studentId}`));\n  }\n  async habitsCreate(habit) {\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits`), {\n      method: 'POST',\n      body: JSON.stringify(habit)\n    });\n  }\n\n  // aggregator-svc (sin BD)\n  async aggregatorHealth() {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/health`));\n  }\n  async aggregatorOverview(id) {\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/${id}/overview`));\n  }\n\n  // analytics-svc (Athena)\n  async analyticsStressTrends() {\n    return this.requestAbs(this.buildUrl(ANA_BASE, `/analytics/stress-trends`));\n  }\n  async analyticsHealth() {\n    return this.requestAbs(this.buildUrl(ANA_BASE, `/health`));\n  }\n}\n\n// Instancia singleton del servicio\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["AGG_BASE","process","env","REACT_APP_AGGREGATOR_URL","PSY_BASE","REACT_APP_PSYCH_URL","SPO_BASE","REACT_APP_SPORTS_URL","HAB_BASE","REACT_APP_HABITS_URL","ANA_BASE","REACT_APP_ANALYTICS_URL","ApiService","constructor","requestAbs","url","options","config","headers","response","fetch","ok","Error","status","json","error","console","buildUrl","base","endpoint","getWellbeingOverview","studentId","getRecommendations","method","getHealth","getEvents","type","params","createEvent","eventData","body","JSON","stringify","registerForEvent","eventId","createAppointment","appointmentData","createHabit","habitData","getStudent","id","createStudent","student","getAppointmentsByStudent","sportsListEvents","sportsCreateEvent","habitsList","habitsCreate","habit","aggregatorHealth","aggregatorOverview","analyticsStressTrends","analyticsHealth","apiService"],"sources":["C:/Users/annes/campus-well/frontend/src/services/api.js"],"sourcesContent":["/**\r\n * Servicio de API para CampusWell\r\n * Este archivo contiene todas las funciones para comunicarse con el backend\r\n */\r\n\r\nconst AGG_BASE = process.env.REACT_APP_AGGREGATOR_URL || '';\r\nconst PSY_BASE = process.env.REACT_APP_PSYCH_URL || '';\r\nconst SPO_BASE = process.env.REACT_APP_SPORTS_URL || '';\r\nconst HAB_BASE = process.env.REACT_APP_HABITS_URL || '';\r\nconst ANA_BASE = process.env.REACT_APP_ANALYTICS_URL || '';\r\n\r\nclass ApiService {\r\n  constructor() {}\r\n\r\n  /**\r\n   * Realiza una petición HTTP\r\n   * @param {string} endpoint - Endpoint de la API\r\n   * @param {Object} options - Opciones de la petición\r\n   * @returns {Promise} - Respuesta de la API\r\n   */\r\n  async requestAbs(url, options = {}) {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Helper para construir URL\r\n  buildUrl(base, endpoint) {\r\n    return `${base}${endpoint}`;\r\n  }\r\n\r\n  /**\r\n   * Obtiene la vista general del bienestar de un estudiante\r\n   * @param {number} studentId - ID del estudiante\r\n   * @returns {Promise<Object>} - Datos del bienestar\r\n   */\r\n  async getWellbeingOverview(studentId) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/${studentId}/overview`));\r\n  }\r\n\r\n  /**\r\n   * Obtiene recomendaciones para un estudiante\r\n   * @param {number} studentId - ID del estudiante\r\n   * @returns {Promise<Object>} - Recomendaciones\r\n   */\r\n  async getRecommendations(studentId) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/recommendation?student_id=${studentId}`), {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Verifica el estado de salud de la API\r\n   * @returns {Promise<Object>} - Estado de salud\r\n   */\r\n  async getHealth() {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/health'));\r\n  }\r\n\r\n  /**\r\n   * Obtiene eventos deportivos\r\n   * @param {string} type - Tipo de evento (opcional)\r\n   * @returns {Promise<Array>} - Lista de eventos\r\n   */\r\n  async getEvents(type = null) {\r\n    const params = type ? `?type=${type}` : '';\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/events${params}`));\r\n  }\r\n\r\n  /**\r\n   * Crea un nuevo evento deportivo\r\n   * @param {Object} eventData - Datos del evento\r\n   * @returns {Promise<Object>} - Evento creado\r\n   */\r\n  async createEvent(eventData) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/events'), {\r\n      method: 'POST',\r\n      body: JSON.stringify(eventData),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registra un estudiante en un evento\r\n   * @param {number} studentId - ID del estudiante\r\n   * @param {number} eventId - ID del evento\r\n   * @returns {Promise<Object>} - Resultado del registro\r\n   */\r\n  async registerForEvent(studentId, eventId) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/registrations?student_id=${studentId}&event_id=${eventId}`), {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Crea una nueva cita psicológica\r\n   * @param {Object} appointmentData - Datos de la cita\r\n   * @returns {Promise<Object>} - Cita creada\r\n   */\r\n  async createAppointment(appointmentData) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/appointments'), {\r\n      method: 'POST',\r\n      body: JSON.stringify(appointmentData),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Crea un nuevo hábito\r\n   * @param {Object} habitData - Datos del hábito\r\n   * @returns {Promise<Object>} - Hábito creado\r\n   */\r\n  async createHabit(habitData) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, '/habits'), {\r\n      method: 'POST',\r\n      body: JSON.stringify(habitData),\r\n    });\r\n  }\r\n\r\n  // ==== Llamadas directas por microservicio (para cumplir rúbrica) ====\r\n  // psych-svc (PostgreSQL)\r\n  async getStudent(id) {\r\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students/${id}`));\r\n  }\r\n  async createStudent(student) {\r\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students`), {\r\n      method: 'POST',\r\n      body: JSON.stringify(student),\r\n    });\r\n  }\r\n  async getAppointmentsByStudent(id) {\r\n    return this.requestAbs(this.buildUrl(PSY_BASE, `/api/students/${id}/history`));\r\n  }\r\n\r\n  // sports-svc (MySQL)\r\n  async sportsListEvents(type = null) {\r\n    const params = type ? `?type=${type}` : '';\r\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/events${params}`));\r\n  }\r\n  async sportsCreateEvent(eventData) {\r\n    return this.requestAbs(this.buildUrl(SPO_BASE, `/events`), {\r\n      method: 'POST',\r\n      body: JSON.stringify(eventData),\r\n    });\r\n  }\r\n\r\n  // habits-svc (MongoDB)\r\n  async habitsList(studentId) {\r\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits/${studentId}`));\r\n  }\r\n  async habitsCreate(habit) {\r\n    return this.requestAbs(this.buildUrl(HAB_BASE, `/habits`), {\r\n      method: 'POST',\r\n      body: JSON.stringify(habit),\r\n    });\r\n  }\r\n\r\n  // aggregator-svc (sin BD)\r\n  async aggregatorHealth() {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/health`));\r\n  }\r\n  async aggregatorOverview(id) {\r\n    return this.requestAbs(this.buildUrl(AGG_BASE, `/wellbeing/${id}/overview`));\r\n  }\r\n\r\n  // analytics-svc (Athena)\r\n  async analyticsStressTrends() {\r\n    return this.requestAbs(this.buildUrl(ANA_BASE, `/analytics/stress-trends`));\r\n  }\r\n  async analyticsHealth() {\r\n    return this.requestAbs(this.buildUrl(ANA_BASE, `/health`));\r\n  }\r\n}\r\n\r\n// Instancia singleton del servicio\r\nconst apiService = new ApiService();\r\n\r\nexport default apiService;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,EAAE;AAC3D,MAAMC,QAAQ,GAAGH,OAAO,CAACC,GAAG,CAACG,mBAAmB,IAAI,EAAE;AACtD,MAAMC,QAAQ,GAAGL,OAAO,CAACC,GAAG,CAACK,oBAAoB,IAAI,EAAE;AACvD,MAAMC,QAAQ,GAAGP,OAAO,CAACC,GAAG,CAACO,oBAAoB,IAAI,EAAE;AACvD,MAAMC,QAAQ,GAAGT,OAAO,CAACC,GAAG,CAACS,uBAAuB,IAAI,EAAE;AAE1D,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG,CAAC;;EAEf;AACF;AACA;AACA;AACA;AACA;EACE,MAAMC,UAAUA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAClC,MAAMC,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGF,OAAO,CAACE;MACb,CAAC;MACD,GAAGF;IACL,CAAC;IAED,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAEE,MAAM,CAAC;MAEzC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClC,MAAMA,KAAK;IACb;EACF;;EAEA;EACAE,QAAQA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IACvB,OAAO,GAAGD,IAAI,GAAGC,QAAQ,EAAE;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMC,oBAAoBA,CAACC,SAAS,EAAE;IACpC,OAAO,IAAI,CAACjB,UAAU,CAAC,IAAI,CAACa,QAAQ,CAAC3B,QAAQ,EAAE,cAAc+B,SAAS,WAAW,CAAC,CAAC;EACrF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMC,kBAAkBA,CAACD,SAAS,EAAE;IAClC,OAAO,IAAI,CAACjB,UAAU,CAAC,IAAI,CAACa,QAAQ,CAAC3B,QAAQ,EAAE,wCAAwC+B,SAAS,EAAE,CAAC,EAAE;MACnGE,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,MAAMC,SAASA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACpB,UAAU,CAAC,IAAI,CAACa,QAAQ,CAAC3B,QAAQ,EAAE,SAAS,CAAC,CAAC;EAC5D;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMmC,SAASA,CAACC,IAAI,GAAG,IAAI,EAAE;IAC3B,MAAMC,MAAM,GAAGD,IAAI,GAAG,SAASA,IAAI,EAAE,GAAG,EAAE;IAC1C,OAAO,IAAI,CAACtB,UAAU,CAAC,IAAI,CAACa,QAAQ,CAAC3B,QAAQ,EAAE,UAAUqC,MAAM,EAAE,CAAC,CAAC;EACrE;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMC,WAAWA,CAACC,SAAS,EAAE;IAC3B,OAAO,IAAI,CAACzB,UAAU,CAAC,IAAI,CAACa,QAAQ,CAAC3B,QAAQ,EAAE,SAAS,CAAC,EAAE;MACzDiC,MAAM,EAAE,MAAM;MACdO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,SAAS;IAChC,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMI,gBAAgBA,CAACZ,SAAS,EAAEa,OAAO,EAAE;IACzC,OAAO,IAAI,CAAC9B,UAAU,CAAC,IAAI,CAACa,QAAQ,CAAC3B,QAAQ,EAAE,6BAA6B+B,SAAS,aAAaa,OAAO,EAAE,CAAC,EAAE;MAC5GX,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMY,iBAAiBA,CAACC,eAAe,EAAE;IACvC,OAAO,IAAI,CAAChC,UAAU,CAAC,IAAI,CAACa,QAAQ,CAAC3B,QAAQ,EAAE,eAAe,CAAC,EAAE;MAC/DiC,MAAM,EAAE,MAAM;MACdO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,eAAe;IACtC,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMC,WAAWA,CAACC,SAAS,EAAE;IAC3B,OAAO,IAAI,CAAClC,UAAU,CAAC,IAAI,CAACa,QAAQ,CAAC3B,QAAQ,EAAE,SAAS,CAAC,EAAE;MACzDiC,MAAM,EAAE,MAAM;MACdO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACM,SAAS;IAChC,CAAC,CAAC;EACJ;;EAEA;EACA;EACA,MAAMC,UAAUA,CAACC,EAAE,EAAE;IACnB,OAAO,IAAI,CAACpC,UAAU,CAAC,IAAI,CAACa,QAAQ,CAACvB,QAAQ,EAAE,iBAAiB8C,EAAE,EAAE,CAAC,CAAC;EACxE;EACA,MAAMC,aAAaA,CAACC,OAAO,EAAE;IAC3B,OAAO,IAAI,CAACtC,UAAU,CAAC,IAAI,CAACa,QAAQ,CAACvB,QAAQ,EAAE,eAAe,CAAC,EAAE;MAC/D6B,MAAM,EAAE,MAAM;MACdO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACU,OAAO;IAC9B,CAAC,CAAC;EACJ;EACA,MAAMC,wBAAwBA,CAACH,EAAE,EAAE;IACjC,OAAO,IAAI,CAACpC,UAAU,CAAC,IAAI,CAACa,QAAQ,CAACvB,QAAQ,EAAE,iBAAiB8C,EAAE,UAAU,CAAC,CAAC;EAChF;;EAEA;EACA,MAAMI,gBAAgBA,CAAClB,IAAI,GAAG,IAAI,EAAE;IAClC,MAAMC,MAAM,GAAGD,IAAI,GAAG,SAASA,IAAI,EAAE,GAAG,EAAE;IAC1C,OAAO,IAAI,CAACtB,UAAU,CAAC,IAAI,CAACa,QAAQ,CAACrB,QAAQ,EAAE,UAAU+B,MAAM,EAAE,CAAC,CAAC;EACrE;EACA,MAAMkB,iBAAiBA,CAAChB,SAAS,EAAE;IACjC,OAAO,IAAI,CAACzB,UAAU,CAAC,IAAI,CAACa,QAAQ,CAACrB,QAAQ,EAAE,SAAS,CAAC,EAAE;MACzD2B,MAAM,EAAE,MAAM;MACdO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,SAAS;IAChC,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMiB,UAAUA,CAACzB,SAAS,EAAE;IAC1B,OAAO,IAAI,CAACjB,UAAU,CAAC,IAAI,CAACa,QAAQ,CAACnB,QAAQ,EAAE,WAAWuB,SAAS,EAAE,CAAC,CAAC;EACzE;EACA,MAAM0B,YAAYA,CAACC,KAAK,EAAE;IACxB,OAAO,IAAI,CAAC5C,UAAU,CAAC,IAAI,CAACa,QAAQ,CAACnB,QAAQ,EAAE,SAAS,CAAC,EAAE;MACzDyB,MAAM,EAAE,MAAM;MACdO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACgB,KAAK;IAC5B,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMC,gBAAgBA,CAAA,EAAG;IACvB,OAAO,IAAI,CAAC7C,UAAU,CAAC,IAAI,CAACa,QAAQ,CAAC3B,QAAQ,EAAE,SAAS,CAAC,CAAC;EAC5D;EACA,MAAM4D,kBAAkBA,CAACV,EAAE,EAAE;IAC3B,OAAO,IAAI,CAACpC,UAAU,CAAC,IAAI,CAACa,QAAQ,CAAC3B,QAAQ,EAAE,cAAckD,EAAE,WAAW,CAAC,CAAC;EAC9E;;EAEA;EACA,MAAMW,qBAAqBA,CAAA,EAAG;IAC5B,OAAO,IAAI,CAAC/C,UAAU,CAAC,IAAI,CAACa,QAAQ,CAACjB,QAAQ,EAAE,0BAA0B,CAAC,CAAC;EAC7E;EACA,MAAMoD,eAAeA,CAAA,EAAG;IACtB,OAAO,IAAI,CAAChD,UAAU,CAAC,IAAI,CAACa,QAAQ,CAACjB,QAAQ,EAAE,SAAS,CAAC,CAAC;EAC5D;AACF;;AAEA;AACA,MAAMqD,UAAU,GAAG,IAAInD,UAAU,CAAC,CAAC;AAEnC,eAAemD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}