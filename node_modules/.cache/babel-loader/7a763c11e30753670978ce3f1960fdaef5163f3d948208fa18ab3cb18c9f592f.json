{"ast":null,"code":"/**\n * Servicio de API para CampusWell\n * Este archivo contiene todas las funciones para comunicarse con el backend\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  /**\n   * Realiza una petición HTTP\n   * @param {string} endpoint - Endpoint de la API\n   * @param {Object} options - Opciones de la petición\n   * @returns {Promise} - Respuesta de la API\n   */\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    console.log('Making request to:', url);\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      console.log('Response status:', response.status);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Response data:', data);\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obtiene la vista general del bienestar de un estudiante\n   * @param {number} studentId - ID del estudiante\n   * @returns {Promise<Object>} - Datos del bienestar\n   */\n  async getWellbeingOverview(studentId) {\n    return this.request(`/wellbeing/${studentId}/overview`);\n  }\n\n  /**\n   * Obtiene recomendaciones para un estudiante\n   * @param {number} studentId - ID del estudiante\n   * @returns {Promise<Object>} - Recomendaciones\n   */\n  async getRecommendations(studentId) {\n    return this.request(`/wellbeing/recommendation?student_id=${studentId}`, {\n      method: 'POST'\n    });\n  }\n\n  /**\n   * Verifica el estado de salud de la API\n   * @returns {Promise<Object>} - Estado de salud\n   */\n  async getHealth() {\n    return this.request('/health');\n  }\n\n  /**\n   * Obtiene eventos deportivos\n   * @param {string} type - Tipo de evento (opcional)\n   * @returns {Promise<Array>} - Lista de eventos\n   */\n  async getEvents(type = null) {\n    const params = type ? `?type=${type}` : '';\n    return this.request(`/events${params}`);\n  }\n\n  /**\n   * Crea un nuevo evento deportivo\n   * @param {Object} eventData - Datos del evento\n   * @returns {Promise<Object>} - Evento creado\n   */\n  async createEvent(eventData) {\n    return this.request('/events', {\n      method: 'POST',\n      body: JSON.stringify(eventData)\n    });\n  }\n\n  /**\n   * Registra un estudiante en un evento\n   * @param {number} studentId - ID del estudiante\n   * @param {number} eventId - ID del evento\n   * @returns {Promise<Object>} - Resultado del registro\n   */\n  async registerForEvent(studentId, eventId) {\n    return this.request(`/registrations?student_id=${studentId}&event_id=${eventId}`, {\n      method: 'POST'\n    });\n  }\n\n  /**\n   * Crea una nueva cita psicológica\n   * @param {Object} appointmentData - Datos de la cita\n   * @returns {Promise<Object>} - Cita creada\n   */\n  async createAppointment(appointmentData) {\n    return this.request('/appointments', {\n      method: 'POST',\n      body: JSON.stringify(appointmentData)\n    });\n  }\n\n  /**\n   * Crea un nuevo hábito\n   * @param {Object} habitData - Datos del hábito\n   * @returns {Promise<Object>} - Hábito creado\n   */\n  async createHabit(habitData) {\n    return this.request('/habits', {\n      method: 'POST',\n      body: JSON.stringify(habitData)\n    });\n  }\n}\n\n// Instancia singleton del servicio\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","request","endpoint","options","url","console","log","config","headers","response","fetch","status","ok","Error","data","json","error","getWellbeingOverview","studentId","getRecommendations","method","getHealth","getEvents","type","params","createEvent","eventData","body","JSON","stringify","registerForEvent","eventId","createAppointment","appointmentData","createHabit","habitData","apiService"],"sources":["/Users/maferlazon/Desktop/cloud/campuswell/frontend/src/services/api.js"],"sourcesContent":["/**\n * Servicio de API para CampusWell\n * Este archivo contiene todas las funciones para comunicarse con el backend\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  /**\n   * Realiza una petición HTTP\n   * @param {string} endpoint - Endpoint de la API\n   * @param {Object} options - Opciones de la petición\n   * @returns {Promise} - Respuesta de la API\n   */\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    console.log('Making request to:', url);\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      console.log('Response status:', response.status);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Response data:', data);\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obtiene la vista general del bienestar de un estudiante\n   * @param {number} studentId - ID del estudiante\n   * @returns {Promise<Object>} - Datos del bienestar\n   */\n  async getWellbeingOverview(studentId) {\n    return this.request(`/wellbeing/${studentId}/overview`);\n  }\n\n  /**\n   * Obtiene recomendaciones para un estudiante\n   * @param {number} studentId - ID del estudiante\n   * @returns {Promise<Object>} - Recomendaciones\n   */\n  async getRecommendations(studentId) {\n    return this.request(`/wellbeing/recommendation?student_id=${studentId}`, {\n      method: 'POST',\n    });\n  }\n\n  /**\n   * Verifica el estado de salud de la API\n   * @returns {Promise<Object>} - Estado de salud\n   */\n  async getHealth() {\n    return this.request('/health');\n  }\n\n  /**\n   * Obtiene eventos deportivos\n   * @param {string} type - Tipo de evento (opcional)\n   * @returns {Promise<Array>} - Lista de eventos\n   */\n  async getEvents(type = null) {\n    const params = type ? `?type=${type}` : '';\n    return this.request(`/events${params}`);\n  }\n\n  /**\n   * Crea un nuevo evento deportivo\n   * @param {Object} eventData - Datos del evento\n   * @returns {Promise<Object>} - Evento creado\n   */\n  async createEvent(eventData) {\n    return this.request('/events', {\n      method: 'POST',\n      body: JSON.stringify(eventData),\n    });\n  }\n\n  /**\n   * Registra un estudiante en un evento\n   * @param {number} studentId - ID del estudiante\n   * @param {number} eventId - ID del evento\n   * @returns {Promise<Object>} - Resultado del registro\n   */\n  async registerForEvent(studentId, eventId) {\n    return this.request(`/registrations?student_id=${studentId}&event_id=${eventId}`, {\n      method: 'POST',\n    });\n  }\n\n  /**\n   * Crea una nueva cita psicológica\n   * @param {Object} appointmentData - Datos de la cita\n   * @returns {Promise<Object>} - Cita creada\n   */\n  async createAppointment(appointmentData) {\n    return this.request('/appointments', {\n      method: 'POST',\n      body: JSON.stringify(appointmentData),\n    });\n  }\n\n  /**\n   * Crea un nuevo hábito\n   * @param {Object} habitData - Datos del hábito\n   * @returns {Promise<Object>} - Hábito creado\n   */\n  async createHabit(habitData) {\n    return this.request('/habits', {\n      method: 'POST',\n      body: JSON.stringify(habitData),\n    });\n  }\n}\n\n// Instancia singleton del servicio\nconst apiService = new ApiService();\n\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}